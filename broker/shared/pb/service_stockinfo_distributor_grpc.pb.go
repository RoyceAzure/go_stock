// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: service_stockinfo_distributor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockInfoDistributor_CreateClientRegister_FullMethodName         = "/pb.StockInfoDistributor/CreateClientRegister"
	StockInfoDistributor_DeleteClientRegister_FullMethodName         = "/pb.StockInfoDistributor/DeleteClientRegister"
	StockInfoDistributor_GetClientRegisterByClientUID_FullMethodName = "/pb.StockInfoDistributor/GetClientRegisterByClientUID"
	StockInfoDistributor_CreateFrontendClient_FullMethodName         = "/pb.StockInfoDistributor/CreateFrontendClient"
	StockInfoDistributor_DeleteFrontendClient_FullMethodName         = "/pb.StockInfoDistributor/DeleteFrontendClient"
	StockInfoDistributor_GetFrontendClientByIP_FullMethodName        = "/pb.StockInfoDistributor/GetFrontendClientByIP"
)

// StockInfoDistributorClient is the client API for StockInfoDistributor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockInfoDistributorClient interface {
	CreateClientRegister(ctx context.Context, in *CreateClientRegisterRequest, opts ...grpc.CallOption) (*CreateClientRegisterResponse, error)
	DeleteClientRegister(ctx context.Context, in *DeleteClientRegisterRequest, opts ...grpc.CallOption) (*DeleteClientRegisterResponse, error)
	GetClientRegisterByClientUID(ctx context.Context, in *GetClientRegisterByClientUIDRequest, opts ...grpc.CallOption) (*GetClientRegisterResponse, error)
	CreateFrontendClient(ctx context.Context, in *CreateFrontendClientRequest, opts ...grpc.CallOption) (*CreateFrontendClientResponse, error)
	DeleteFrontendClient(ctx context.Context, in *DeleteFrontendClientRequest, opts ...grpc.CallOption) (*DeleteFrontendClientResponse, error)
	GetFrontendClientByIP(ctx context.Context, in *GetFrontendClientByIPRequest, opts ...grpc.CallOption) (*GetFrontendClientByIPResponse, error)
}

type stockInfoDistributorClient struct {
	cc grpc.ClientConnInterface
}

func NewStockInfoDistributorClient(cc grpc.ClientConnInterface) StockInfoDistributorClient {
	return &stockInfoDistributorClient{cc}
}

func (c *stockInfoDistributorClient) CreateClientRegister(ctx context.Context, in *CreateClientRegisterRequest, opts ...grpc.CallOption) (*CreateClientRegisterResponse, error) {
	out := new(CreateClientRegisterResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_CreateClientRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInfoDistributorClient) DeleteClientRegister(ctx context.Context, in *DeleteClientRegisterRequest, opts ...grpc.CallOption) (*DeleteClientRegisterResponse, error) {
	out := new(DeleteClientRegisterResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_DeleteClientRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInfoDistributorClient) GetClientRegisterByClientUID(ctx context.Context, in *GetClientRegisterByClientUIDRequest, opts ...grpc.CallOption) (*GetClientRegisterResponse, error) {
	out := new(GetClientRegisterResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_GetClientRegisterByClientUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInfoDistributorClient) CreateFrontendClient(ctx context.Context, in *CreateFrontendClientRequest, opts ...grpc.CallOption) (*CreateFrontendClientResponse, error) {
	out := new(CreateFrontendClientResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_CreateFrontendClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInfoDistributorClient) DeleteFrontendClient(ctx context.Context, in *DeleteFrontendClientRequest, opts ...grpc.CallOption) (*DeleteFrontendClientResponse, error) {
	out := new(DeleteFrontendClientResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_DeleteFrontendClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInfoDistributorClient) GetFrontendClientByIP(ctx context.Context, in *GetFrontendClientByIPRequest, opts ...grpc.CallOption) (*GetFrontendClientByIPResponse, error) {
	out := new(GetFrontendClientByIPResponse)
	err := c.cc.Invoke(ctx, StockInfoDistributor_GetFrontendClientByIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockInfoDistributorServer is the server API for StockInfoDistributor service.
// All implementations must embed UnimplementedStockInfoDistributorServer
// for forward compatibility
type StockInfoDistributorServer interface {
	CreateClientRegister(context.Context, *CreateClientRegisterRequest) (*CreateClientRegisterResponse, error)
	DeleteClientRegister(context.Context, *DeleteClientRegisterRequest) (*DeleteClientRegisterResponse, error)
	GetClientRegisterByClientUID(context.Context, *GetClientRegisterByClientUIDRequest) (*GetClientRegisterResponse, error)
	CreateFrontendClient(context.Context, *CreateFrontendClientRequest) (*CreateFrontendClientResponse, error)
	DeleteFrontendClient(context.Context, *DeleteFrontendClientRequest) (*DeleteFrontendClientResponse, error)
	GetFrontendClientByIP(context.Context, *GetFrontendClientByIPRequest) (*GetFrontendClientByIPResponse, error)
	mustEmbedUnimplementedStockInfoDistributorServer()
}

// UnimplementedStockInfoDistributorServer must be embedded to have forward compatible implementations.
type UnimplementedStockInfoDistributorServer struct {
}

func (UnimplementedStockInfoDistributorServer) CreateClientRegister(context.Context, *CreateClientRegisterRequest) (*CreateClientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientRegister not implemented")
}
func (UnimplementedStockInfoDistributorServer) DeleteClientRegister(context.Context, *DeleteClientRegisterRequest) (*DeleteClientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientRegister not implemented")
}
func (UnimplementedStockInfoDistributorServer) GetClientRegisterByClientUID(context.Context, *GetClientRegisterByClientUIDRequest) (*GetClientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientRegisterByClientUID not implemented")
}
func (UnimplementedStockInfoDistributorServer) CreateFrontendClient(context.Context, *CreateFrontendClientRequest) (*CreateFrontendClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFrontendClient not implemented")
}
func (UnimplementedStockInfoDistributorServer) DeleteFrontendClient(context.Context, *DeleteFrontendClientRequest) (*DeleteFrontendClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFrontendClient not implemented")
}
func (UnimplementedStockInfoDistributorServer) GetFrontendClientByIP(context.Context, *GetFrontendClientByIPRequest) (*GetFrontendClientByIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontendClientByIP not implemented")
}
func (UnimplementedStockInfoDistributorServer) mustEmbedUnimplementedStockInfoDistributorServer() {}

// UnsafeStockInfoDistributorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockInfoDistributorServer will
// result in compilation errors.
type UnsafeStockInfoDistributorServer interface {
	mustEmbedUnimplementedStockInfoDistributorServer()
}

func RegisterStockInfoDistributorServer(s grpc.ServiceRegistrar, srv StockInfoDistributorServer) {
	s.RegisterService(&StockInfoDistributor_ServiceDesc, srv)
}

func _StockInfoDistributor_CreateClientRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).CreateClientRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_CreateClientRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).CreateClientRegister(ctx, req.(*CreateClientRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockInfoDistributor_DeleteClientRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).DeleteClientRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_DeleteClientRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).DeleteClientRegister(ctx, req.(*DeleteClientRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockInfoDistributor_GetClientRegisterByClientUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRegisterByClientUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).GetClientRegisterByClientUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_GetClientRegisterByClientUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).GetClientRegisterByClientUID(ctx, req.(*GetClientRegisterByClientUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockInfoDistributor_CreateFrontendClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFrontendClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).CreateFrontendClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_CreateFrontendClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).CreateFrontendClient(ctx, req.(*CreateFrontendClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockInfoDistributor_DeleteFrontendClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFrontendClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).DeleteFrontendClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_DeleteFrontendClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).DeleteFrontendClient(ctx, req.(*DeleteFrontendClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockInfoDistributor_GetFrontendClientByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontendClientByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockInfoDistributorServer).GetFrontendClientByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockInfoDistributor_GetFrontendClientByIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockInfoDistributorServer).GetFrontendClientByIP(ctx, req.(*GetFrontendClientByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockInfoDistributor_ServiceDesc is the grpc.ServiceDesc for StockInfoDistributor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockInfoDistributor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StockInfoDistributor",
	HandlerType: (*StockInfoDistributorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClientRegister",
			Handler:    _StockInfoDistributor_CreateClientRegister_Handler,
		},
		{
			MethodName: "DeleteClientRegister",
			Handler:    _StockInfoDistributor_DeleteClientRegister_Handler,
		},
		{
			MethodName: "GetClientRegisterByClientUID",
			Handler:    _StockInfoDistributor_GetClientRegisterByClientUID_Handler,
		},
		{
			MethodName: "CreateFrontendClient",
			Handler:    _StockInfoDistributor_CreateFrontendClient_Handler,
		},
		{
			MethodName: "DeleteFrontendClient",
			Handler:    _StockInfoDistributor_DeleteFrontendClient_Handler,
		},
		{
			MethodName: "GetFrontendClientByIP",
			Handler:    _StockInfoDistributor_GetFrontendClientByIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_stockinfo_distributor.proto",
}
