// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createFundStmt, err = db.PrepareContext(ctx, createFund); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFund: %w", err)
	}
	if q.createStockStmt, err = db.PrepareContext(ctx, createStock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStock: %w", err)
	}
	if q.createStockTransactionStmt, err = db.PrepareContext(ctx, createStockTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStockTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserStockStmt, err = db.PrepareContext(ctx, createUserStock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserStock: %w", err)
	}
	if q.deleteFundStmt, err = db.PrepareContext(ctx, deleteFund); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFund: %w", err)
	}
	if q.deleteStockStmt, err = db.PrepareContext(ctx, deleteStock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStock: %w", err)
	}
	if q.deleteStockTransactionStmt, err = db.PrepareContext(ctx, deleteStockTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStockTransaction: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserStockStmt, err = db.PrepareContext(ctx, deleteUserStock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserStock: %w", err)
	}
	if q.getFundStmt, err = db.PrepareContext(ctx, getFund); err != nil {
		return nil, fmt.Errorf("error preparing query GetFund: %w", err)
	}
	if q.getStockStmt, err = db.PrepareContext(ctx, getStock); err != nil {
		return nil, fmt.Errorf("error preparing query GetStock: %w", err)
	}
	if q.getStockTransactionStmt, err = db.PrepareContext(ctx, getStockTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockTransaction: %w", err)
	}
	if q.getStockTransactionsStmt, err = db.PrepareContext(ctx, getStockTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockTransactions: %w", err)
	}
	if q.getStockTransactionsByDateStmt, err = db.PrepareContext(ctx, getStockTransactionsByDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockTransactionsByDate: %w", err)
	}
	if q.getStockTransactionsByStockIdStmt, err = db.PrepareContext(ctx, getStockTransactionsByStockId); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockTransactionsByStockId: %w", err)
	}
	if q.getStockTransactionsByUserIdStmt, err = db.PrepareContext(ctx, getStockTransactionsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockTransactionsByUserId: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserForUpdateNoKeyStmt, err = db.PrepareContext(ctx, getUserForUpdateNoKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserForUpdateNoKey: %w", err)
	}
	if q.getUserStockStmt, err = db.PrepareContext(ctx, getUserStock); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStock: %w", err)
	}
	if q.getUserStocksStmt, err = db.PrepareContext(ctx, getUserStocks); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStocks: %w", err)
	}
	if q.getUserStocksByPDateStmt, err = db.PrepareContext(ctx, getUserStocksByPDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStocksByPDate: %w", err)
	}
	if q.getUserStocksByStockIdStmt, err = db.PrepareContext(ctx, getUserStocksByStockId); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStocksByStockId: %w", err)
	}
	if q.getUserStocksByUserAStockStmt, err = db.PrepareContext(ctx, getUserStocksByUserAStock); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStocksByUserAStock: %w", err)
	}
	if q.getUserStocksByUserIdStmt, err = db.PrepareContext(ctx, getUserStocksByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStocksByUserId: %w", err)
	}
	if q.getfundByUidandFidStmt, err = db.PrepareContext(ctx, getfundByUidandFid); err != nil {
		return nil, fmt.Errorf("error preparing query GetfundByUidandFid: %w", err)
	}
	if q.getfundByUidandFidForUpdateNoKStmt, err = db.PrepareContext(ctx, getfundByUidandFidForUpdateNoK); err != nil {
		return nil, fmt.Errorf("error preparing query GetfundByUidandFidForUpdateNoK: %w", err)
	}
	if q.getfundByUserIdStmt, err = db.PrepareContext(ctx, getfundByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetfundByUserId: %w", err)
	}
	if q.getfundsStmt, err = db.PrepareContext(ctx, getfunds); err != nil {
		return nil, fmt.Errorf("error preparing query Getfunds: %w", err)
	}
	if q.getserStockByUidandSidStmt, err = db.PrepareContext(ctx, getserStockByUidandSid); err != nil {
		return nil, fmt.Errorf("error preparing query GetserStockByUidandSid: %w", err)
	}
	if q.getserStockByUidandSidForUpdateNoKStmt, err = db.PrepareContext(ctx, getserStockByUidandSidForUpdateNoK); err != nil {
		return nil, fmt.Errorf("error preparing query GetserStockByUidandSidForUpdateNoK: %w", err)
	}
	if q.getstockByCNStmt, err = db.PrepareContext(ctx, getstockByCN); err != nil {
		return nil, fmt.Errorf("error preparing query GetstockByCN: %w", err)
	}
	if q.getstockByTSStmt, err = db.PrepareContext(ctx, getstockByTS); err != nil {
		return nil, fmt.Errorf("error preparing query GetstockByTS: %w", err)
	}
	if q.getstocksStmt, err = db.PrepareContext(ctx, getstocks); err != nil {
		return nil, fmt.Errorf("error preparing query Getstocks: %w", err)
	}
	if q.getusersStmt, err = db.PrepareContext(ctx, getusers); err != nil {
		return nil, fmt.Errorf("error preparing query Getusers: %w", err)
	}
	if q.updateFundStmt, err = db.PrepareContext(ctx, updateFund); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFund: %w", err)
	}
	if q.updateStockStmt, err = db.PrepareContext(ctx, updateStock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStock: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserStockStmt, err = db.PrepareContext(ctx, updateUserStock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserStock: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createFundStmt != nil {
		if cerr := q.createFundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFundStmt: %w", cerr)
		}
	}
	if q.createStockStmt != nil {
		if cerr := q.createStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStockStmt: %w", cerr)
		}
	}
	if q.createStockTransactionStmt != nil {
		if cerr := q.createStockTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStockTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserStockStmt != nil {
		if cerr := q.createUserStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStockStmt: %w", cerr)
		}
	}
	if q.deleteFundStmt != nil {
		if cerr := q.deleteFundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFundStmt: %w", cerr)
		}
	}
	if q.deleteStockStmt != nil {
		if cerr := q.deleteStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStockStmt: %w", cerr)
		}
	}
	if q.deleteStockTransactionStmt != nil {
		if cerr := q.deleteStockTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStockTransactionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStockStmt != nil {
		if cerr := q.deleteUserStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStockStmt: %w", cerr)
		}
	}
	if q.getFundStmt != nil {
		if cerr := q.getFundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFundStmt: %w", cerr)
		}
	}
	if q.getStockStmt != nil {
		if cerr := q.getStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockStmt: %w", cerr)
		}
	}
	if q.getStockTransactionStmt != nil {
		if cerr := q.getStockTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockTransactionStmt: %w", cerr)
		}
	}
	if q.getStockTransactionsStmt != nil {
		if cerr := q.getStockTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockTransactionsStmt: %w", cerr)
		}
	}
	if q.getStockTransactionsByDateStmt != nil {
		if cerr := q.getStockTransactionsByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockTransactionsByDateStmt: %w", cerr)
		}
	}
	if q.getStockTransactionsByStockIdStmt != nil {
		if cerr := q.getStockTransactionsByStockIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockTransactionsByStockIdStmt: %w", cerr)
		}
	}
	if q.getStockTransactionsByUserIdStmt != nil {
		if cerr := q.getStockTransactionsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockTransactionsByUserIdStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserForUpdateNoKeyStmt != nil {
		if cerr := q.getUserForUpdateNoKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserForUpdateNoKeyStmt: %w", cerr)
		}
	}
	if q.getUserStockStmt != nil {
		if cerr := q.getUserStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStockStmt: %w", cerr)
		}
	}
	if q.getUserStocksStmt != nil {
		if cerr := q.getUserStocksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStocksStmt: %w", cerr)
		}
	}
	if q.getUserStocksByPDateStmt != nil {
		if cerr := q.getUserStocksByPDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStocksByPDateStmt: %w", cerr)
		}
	}
	if q.getUserStocksByStockIdStmt != nil {
		if cerr := q.getUserStocksByStockIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStocksByStockIdStmt: %w", cerr)
		}
	}
	if q.getUserStocksByUserAStockStmt != nil {
		if cerr := q.getUserStocksByUserAStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStocksByUserAStockStmt: %w", cerr)
		}
	}
	if q.getUserStocksByUserIdStmt != nil {
		if cerr := q.getUserStocksByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStocksByUserIdStmt: %w", cerr)
		}
	}
	if q.getfundByUidandFidStmt != nil {
		if cerr := q.getfundByUidandFidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getfundByUidandFidStmt: %w", cerr)
		}
	}
	if q.getfundByUidandFidForUpdateNoKStmt != nil {
		if cerr := q.getfundByUidandFidForUpdateNoKStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getfundByUidandFidForUpdateNoKStmt: %w", cerr)
		}
	}
	if q.getfundByUserIdStmt != nil {
		if cerr := q.getfundByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getfundByUserIdStmt: %w", cerr)
		}
	}
	if q.getfundsStmt != nil {
		if cerr := q.getfundsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getfundsStmt: %w", cerr)
		}
	}
	if q.getserStockByUidandSidStmt != nil {
		if cerr := q.getserStockByUidandSidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getserStockByUidandSidStmt: %w", cerr)
		}
	}
	if q.getserStockByUidandSidForUpdateNoKStmt != nil {
		if cerr := q.getserStockByUidandSidForUpdateNoKStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getserStockByUidandSidForUpdateNoKStmt: %w", cerr)
		}
	}
	if q.getstockByCNStmt != nil {
		if cerr := q.getstockByCNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getstockByCNStmt: %w", cerr)
		}
	}
	if q.getstockByTSStmt != nil {
		if cerr := q.getstockByTSStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getstockByTSStmt: %w", cerr)
		}
	}
	if q.getstocksStmt != nil {
		if cerr := q.getstocksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getstocksStmt: %w", cerr)
		}
	}
	if q.getusersStmt != nil {
		if cerr := q.getusersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getusersStmt: %w", cerr)
		}
	}
	if q.updateFundStmt != nil {
		if cerr := q.updateFundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFundStmt: %w", cerr)
		}
	}
	if q.updateStockStmt != nil {
		if cerr := q.updateStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStockStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserStockStmt != nil {
		if cerr := q.updateUserStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStockStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	createFundStmt                         *sql.Stmt
	createStockStmt                        *sql.Stmt
	createStockTransactionStmt             *sql.Stmt
	createUserStmt                         *sql.Stmt
	createUserStockStmt                    *sql.Stmt
	deleteFundStmt                         *sql.Stmt
	deleteStockStmt                        *sql.Stmt
	deleteStockTransactionStmt             *sql.Stmt
	deleteUserStmt                         *sql.Stmt
	deleteUserStockStmt                    *sql.Stmt
	getFundStmt                            *sql.Stmt
	getStockStmt                           *sql.Stmt
	getStockTransactionStmt                *sql.Stmt
	getStockTransactionsStmt               *sql.Stmt
	getStockTransactionsByDateStmt         *sql.Stmt
	getStockTransactionsByStockIdStmt      *sql.Stmt
	getStockTransactionsByUserIdStmt       *sql.Stmt
	getUserStmt                            *sql.Stmt
	getUserForUpdateNoKeyStmt              *sql.Stmt
	getUserStockStmt                       *sql.Stmt
	getUserStocksStmt                      *sql.Stmt
	getUserStocksByPDateStmt               *sql.Stmt
	getUserStocksByStockIdStmt             *sql.Stmt
	getUserStocksByUserAStockStmt          *sql.Stmt
	getUserStocksByUserIdStmt              *sql.Stmt
	getfundByUidandFidStmt                 *sql.Stmt
	getfundByUidandFidForUpdateNoKStmt     *sql.Stmt
	getfundByUserIdStmt                    *sql.Stmt
	getfundsStmt                           *sql.Stmt
	getserStockByUidandSidStmt             *sql.Stmt
	getserStockByUidandSidForUpdateNoKStmt *sql.Stmt
	getstockByCNStmt                       *sql.Stmt
	getstockByTSStmt                       *sql.Stmt
	getstocksStmt                          *sql.Stmt
	getusersStmt                           *sql.Stmt
	updateFundStmt                         *sql.Stmt
	updateStockStmt                        *sql.Stmt
	updateUserStmt                         *sql.Stmt
	updateUserStockStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		createFundStmt:                         q.createFundStmt,
		createStockStmt:                        q.createStockStmt,
		createStockTransactionStmt:             q.createStockTransactionStmt,
		createUserStmt:                         q.createUserStmt,
		createUserStockStmt:                    q.createUserStockStmt,
		deleteFundStmt:                         q.deleteFundStmt,
		deleteStockStmt:                        q.deleteStockStmt,
		deleteStockTransactionStmt:             q.deleteStockTransactionStmt,
		deleteUserStmt:                         q.deleteUserStmt,
		deleteUserStockStmt:                    q.deleteUserStockStmt,
		getFundStmt:                            q.getFundStmt,
		getStockStmt:                           q.getStockStmt,
		getStockTransactionStmt:                q.getStockTransactionStmt,
		getStockTransactionsStmt:               q.getStockTransactionsStmt,
		getStockTransactionsByDateStmt:         q.getStockTransactionsByDateStmt,
		getStockTransactionsByStockIdStmt:      q.getStockTransactionsByStockIdStmt,
		getStockTransactionsByUserIdStmt:       q.getStockTransactionsByUserIdStmt,
		getUserStmt:                            q.getUserStmt,
		getUserForUpdateNoKeyStmt:              q.getUserForUpdateNoKeyStmt,
		getUserStockStmt:                       q.getUserStockStmt,
		getUserStocksStmt:                      q.getUserStocksStmt,
		getUserStocksByPDateStmt:               q.getUserStocksByPDateStmt,
		getUserStocksByStockIdStmt:             q.getUserStocksByStockIdStmt,
		getUserStocksByUserAStockStmt:          q.getUserStocksByUserAStockStmt,
		getUserStocksByUserIdStmt:              q.getUserStocksByUserIdStmt,
		getfundByUidandFidStmt:                 q.getfundByUidandFidStmt,
		getfundByUidandFidForUpdateNoKStmt:     q.getfundByUidandFidForUpdateNoKStmt,
		getfundByUserIdStmt:                    q.getfundByUserIdStmt,
		getfundsStmt:                           q.getfundsStmt,
		getserStockByUidandSidStmt:             q.getserStockByUidandSidStmt,
		getserStockByUidandSidForUpdateNoKStmt: q.getserStockByUidandSidForUpdateNoKStmt,
		getstockByCNStmt:                       q.getstockByCNStmt,
		getstockByTSStmt:                       q.getstockByTSStmt,
		getstocksStmt:                          q.getstocksStmt,
		getusersStmt:                           q.getusersStmt,
		updateFundStmt:                         q.updateFundStmt,
		updateStockStmt:                        q.updateStockStmt,
		updateUserStmt:                         q.updateUserStmt,
		updateUserStockStmt:                    q.updateUserStockStmt,
	}
}
