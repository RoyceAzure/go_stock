// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user"(
    user_name,
    email,
    hashed_password,
    password_changed_at,
    sso_identifer,
    cr_user
) VALUES(
    $1, $2, $3, $4, $5, $6
)   RETURNING user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user
`

type CreateUserParams struct {
	UserName          string         `json:"user_name"`
	Email             string         `json:"email"`
	HashedPassword    string         `json:"hashed_password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	SsoIdentifer      sql.NullString `json:"sso_identifer"`
	CrUser            string         `json:"cr_user"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.UserName,
		arg.Email,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.SsoIdentifer,
		arg.CrUser,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user FROM "user"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user FROM "user"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUserForUpdateNoKey = `-- name: GetUserForUpdateNoKey :one
SELECT user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user FROM "user"
WHERE user_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdateNoKey(ctx context.Context, userID int64) (User, error) {
	row := q.queryRow(ctx, q.getUserForUpdateNoKeyStmt, getUserForUpdateNoKey, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getusers = `-- name: Getusers :many
SELECT user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user FROM  "user"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetusersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Getusers(ctx context.Context, arg GetusersParams) ([]User, error) {
	rows, err := q.query(ctx, q.getusersStmt, getusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.SsoIdentifer,
			&i.CrDate,
			&i.UpDate,
			&i.CrUser,
			&i.UpUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET 
    user_name = COALESCE($1, user_name),  
    hashed_password = COALESCE($2, hashed_password),
    password_changed_at = COALESCE($3, password_changed_at),
    sso_identifer = COALESCE($4, sso_identifer),
    up_date = COALESCE($5, up_date),
    up_user = COALESCE($6, up_user)
WHERE user_id = $7
RETURNING user_id, user_name, email, hashed_password, password_changed_at, sso_identifer, cr_date, up_date, cr_user, up_user
`

type UpdateUserParams struct {
	UserName          sql.NullString `json:"user_name"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	SsoIdentifer      sql.NullString `json:"sso_identifer"`
	UpDate            sql.NullTime   `json:"up_date"`
	UpUser            sql.NullString `json:"up_user"`
	UserID            int64          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.UserName,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.SsoIdentifer,
		arg.UpDate,
		arg.UpUser,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}
