// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project stockinfo{
    database_type: 'PostgresSQL'
    Note: '''
        # Stock info
    '''
}


Enum transation_result {
  createed
  processed
  successed
  failed
}

Table user as U{
  user_id bigserial [pk]
  user_name varchar [not null]
  email varchar [unique, not null]
  is_email_verified bool [not null, default: false]
  hashed_password varchar [not null]
  password_changed_at timestamptz [not null, default: '0001-01-01 00:00:00Z']
  sso_identifer varchar [null]
  cr_date timestamptz  [not null, default: `now()`]
  up_date timestamptz
  cr_user varchar [not null]
  up_user varchar
  Indexes{
    user_id
  }
}

Table verify_email {
  id bigserial [pk]
  user_id bigint [ref: > U.user_id, not null]
  email varchar [not null]
  secret_code varchar [not null]
  is_used bool [not null, default: false]
  cr_date timestamptz  [not null, default: `now()`]
  expired_at timestamptz  [not null, default: `now() + interval '15 minutes'`]
}

Table session {
  id uuid [pk]
  user_id bigint [ref: > U.user_id, not null]
  refresh_token varchar [not null]
  user_agent varchar [not null]
  client_ip varchar [not null]
  is_blocked bool [not null, default: false]
  cr_date timestamptz  [not null, default: `now()`]
  expired_at timestamptz  [not null, default: `now() + interval '3 days'`]
}

Table fund{
  fund_id bigserial [pk, increment]
  user_id bigint [ref: > U.user_id, not null]
  balance decimal [not null]
  currency_type  varchar [not null]
  cr_date timestamptz  [not null, default: `now()`]
  up_date timestamptz
  cr_user varchar [not null]
  up_user varchar
  Indexes{
    fund_id
    user_id
    (user_id, currency_type) [unique]
  }
}

Table stock{
  stock_id bigserial [pk, increment]
  stock_code varchar [not null]
  stock_name varchar [not null]
  current_price decimal [not null]
  market_cap bigint [not null] //Market Capitalization，市值
  cr_date timestamptz  [not null, default: `now()`]
  up_date timestamptz
  cr_user varchar [not null]
  up_user varchar
  Indexes{
    stock_id
  }
}

Table user_stock{
  user_stock_id bigserial [pk, increment]
  user_id bigint [not null]
  stock_id bigint [not null]
  quantity int [not null, default: 1]
  purchase_price_per_share decimal [not null] //購買時每股價格
  purchased_date timestamp [not null]
  cr_date timestamptz  [not null, default: `now()`]
  up_date timestamptz
  cr_user varchar [not null]
  up_user varchar


  Indexes{
    user_stock_id
    user_id
    stock_id
  }
}

Table stock_transaction{
  transation_id bigserial [pk, increment]
  user_id bigint [not null]
  stock_id bigint [not null]
  fund_id bigint [not null]
  transaction_type varchar [not null]
  transaction_date timestamp [not null, default: `now()`]
  transation_amt int [not null]
  transation_price_per_share decimal [not null] 
  result transation_result [not null, default: 'createed']
  cr_date timestamptz  [not null, default: `now()`]
  up_date timestamptz
  cr_user varchar [not null]
  up_user varchar


  Indexes{
    transation_id
    (user_id, stock_id)
  }
}


Table realized_profit_loss{
  id bigserial [pk, increment]
  transation_id bigint [ref: > stock_transaction.transation_id, not null]
  user_id bigint [ref: > U.user_id, not null]
  product_name varchar [not null]
  cost_per_price decimal [not null]
  cost_total_price decimal [not null]
  realized decimal [not null]
  realized_precent varchar [not null]
  Indexes{
    transation_id
    user_id
  }
}

Ref: user_stock.user_id > user.user_id 