// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RoyceAzure/go-stockinfo-scheduler/service/redisService (interfaces: RedisService)

// Package mock_redis_service is a generated GoMock package.
package mock_redis_service

import (
	context "context"
	reflect "reflect"

	redisService "github.com/RoyceAzure/go-stockinfo-scheduler/service/redisService"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// GetLatestSPR mocks base method.
func (m *MockRedisService) GetLatestSPR(arg0 context.Context) ([]redisService.StockPriceRealtimeDTO, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSPR", arg0)
	ret0, _ := ret[0].([]redisService.StockPriceRealtimeDTO)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestSPR indicates an expected call of GetLatestSPR.
func (mr *MockRedisServiceMockRecorder) GetLatestSPR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSPR", reflect.TypeOf((*MockRedisService)(nil).GetLatestSPR), arg0)
}
