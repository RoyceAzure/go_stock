// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForBulkInsertDAVGALL implements pgx.CopyFromSource.
type iteratorForBulkInsertDAVGALL struct {
	rows                 []BulkInsertDAVGALLParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkInsertDAVGALL) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkInsertDAVGALL) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].StockName,
		r.rows[0].ClosePrice,
		r.rows[0].MonthlyAvgPrice,
	}, nil
}

func (r iteratorForBulkInsertDAVGALL) Err() error {
	return nil
}

func (q *Queries) BulkInsertDAVGALL(ctx context.Context, arg []BulkInsertDAVGALLParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"stock_day_avg_all"}, []string{"code", "stock_name", "close_price", "monthly_avg_price"}, &iteratorForBulkInsertDAVGALL{rows: arg})
}

// iteratorForBulkInsertSPR implements pgx.CopyFromSource.
type iteratorForBulkInsertSPR struct {
	rows                 []BulkInsertSPRParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkInsertSPR) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkInsertSPR) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].StockName,
		r.rows[0].TradeVolume,
		r.rows[0].TradeValue,
		r.rows[0].OpeningPrice,
		r.rows[0].HighestPrice,
		r.rows[0].LowestPrice,
		r.rows[0].ClosingPrice,
		r.rows[0].Change,
		r.rows[0].Transaction,
		r.rows[0].TransTime,
	}, nil
}

func (r iteratorForBulkInsertSPR) Err() error {
	return nil
}

func (q *Queries) BulkInsertSPR(ctx context.Context, arg []BulkInsertSPRParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"stock_price_realtime"}, []string{"code", "stock_name", "trade_volume", "trade_value", "opening_price", "highest_price", "lowest_price", "closing_price", "change", "transaction", "trans_time"}, &iteratorForBulkInsertSPR{rows: arg})
}
