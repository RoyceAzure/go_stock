// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RoyceAzure/go-stockinfo-scheduler/repository/redis (interfaces: JRedisDao)

// Package mock_redis_dao is a generated GoMock package.
package mock_redis_dao

import (
	context "context"
	reflect "reflect"

	repository "github.com/RoyceAzure/go-stockinfo-scheduler/repository/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockJRedisDao is a mock of JRedisDao interface.
type MockJRedisDao struct {
	ctrl     *gomock.Controller
	recorder *MockJRedisDaoMockRecorder
}

// MockJRedisDaoMockRecorder is the mock recorder for MockJRedisDao.
type MockJRedisDaoMockRecorder struct {
	mock *MockJRedisDao
}

// NewMockJRedisDao creates a new mock instance.
func NewMockJRedisDao(ctrl *gomock.Controller) *MockJRedisDao {
	mock := &MockJRedisDao{ctrl: ctrl}
	mock.recorder = &MockJRedisDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJRedisDao) EXPECT() *MockJRedisDaoMockRecorder {
	return m.recorder
}

// BulkInsertSPR mocks base method.
func (m *MockJRedisDao) BulkInsertSPR(arg0 context.Context, arg1 string, arg2 []repository.StockPriceRealtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertSPR", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertSPR indicates an expected call of BulkInsertSPR.
func (mr *MockJRedisDaoMockRecorder) BulkInsertSPR(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertSPR", reflect.TypeOf((*MockJRedisDao)(nil).BulkInsertSPR), arg0, arg1, arg2)
}

// DeleteSPRByID mocks base method.
func (m *MockJRedisDao) DeleteSPRByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSPRByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSPRByID indicates an expected call of DeleteSPRByID.
func (mr *MockJRedisDaoMockRecorder) DeleteSPRByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSPRByID", reflect.TypeOf((*MockJRedisDao)(nil).DeleteSPRByID), arg0, arg1)
}

// FindSPRByID mocks base method.
func (m *MockJRedisDao) FindSPRByID(arg0 context.Context, arg1 string) ([]repository.StockPriceRealtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSPRByID", arg0, arg1)
	ret0, _ := ret[0].([]repository.StockPriceRealtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSPRByID indicates an expected call of FindSPRByID.
func (mr *MockJRedisDaoMockRecorder) FindSPRByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSPRByID", reflect.TypeOf((*MockJRedisDao)(nil).FindSPRByID), arg0, arg1)
}

// GetSPRLatestKey mocks base method.
func (m *MockJRedisDao) GetSPRLatestKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSPRLatestKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSPRLatestKey indicates an expected call of GetSPRLatestKey.
func (mr *MockJRedisDaoMockRecorder) GetSPRLatestKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSPRLatestKey", reflect.TypeOf((*MockJRedisDao)(nil).GetSPRLatestKey))
}

// SetSPRLatestKey mocks base method.
func (m *MockJRedisDao) SetSPRLatestKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSPRLatestKey", arg0)
}

// SetSPRLatestKey indicates an expected call of SetSPRLatestKey.
func (mr *MockJRedisDaoMockRecorder) SetSPRLatestKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSPRLatestKey", reflect.TypeOf((*MockJRedisDao)(nil).SetSPRLatestKey), arg0)
}
