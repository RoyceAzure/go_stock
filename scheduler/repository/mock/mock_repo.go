// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RoyceAzure/go-stockinfo-scheduler/repository/sqlc (interfaces: Dao)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	repository "github.com/RoyceAzure/go-stockinfo-scheduler/repository/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// BatchDeleteSDAVGALL mocks base method.
func (m *MockDao) BatchDeleteSDAVGALL(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteSDAVGALL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteSDAVGALL indicates an expected call of BatchDeleteSDAVGALL.
func (mr *MockDaoMockRecorder) BatchDeleteSDAVGALL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteSDAVGALL", reflect.TypeOf((*MockDao)(nil).BatchDeleteSDAVGALL), arg0, arg1)
}

// BulkInsertDAVGALL mocks base method.
func (m *MockDao) BulkInsertDAVGALL(arg0 context.Context, arg1 []repository.BulkInsertDAVGALLParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertDAVGALL", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkInsertDAVGALL indicates an expected call of BulkInsertDAVGALL.
func (mr *MockDaoMockRecorder) BulkInsertDAVGALL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertDAVGALL", reflect.TypeOf((*MockDao)(nil).BulkInsertDAVGALL), arg0, arg1)
}

// BulkInsertSPR mocks base method.
func (m *MockDao) BulkInsertSPR(arg0 context.Context, arg1 []repository.BulkInsertSPRParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertSPR", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkInsertSPR indicates an expected call of BulkInsertSPR.
func (mr *MockDaoMockRecorder) BulkInsertSPR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertSPR", reflect.TypeOf((*MockDao)(nil).BulkInsertSPR), arg0, arg1)
}

// CreateSDAVGALL mocks base method.
func (m *MockDao) CreateSDAVGALL(arg0 context.Context, arg1 repository.CreateSDAVGALLParams) (repository.StockDayAvgAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSDAVGALL", arg0, arg1)
	ret0, _ := ret[0].(repository.StockDayAvgAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSDAVGALL indicates an expected call of CreateSDAVGALL.
func (mr *MockDaoMockRecorder) CreateSDAVGALL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSDAVGALL", reflect.TypeOf((*MockDao)(nil).CreateSDAVGALL), arg0, arg1)
}

// CreateSPR mocks base method.
func (m *MockDao) CreateSPR(arg0 context.Context, arg1 repository.CreateSPRParams) (repository.StockPriceRealtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSPR", arg0, arg1)
	ret0, _ := ret[0].(repository.StockPriceRealtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSPR indicates an expected call of CreateSPR.
func (mr *MockDaoMockRecorder) CreateSPR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSPR", reflect.TypeOf((*MockDao)(nil).CreateSPR), arg0, arg1)
}

// DeleteSDAVGALLCodeByTime mocks base method.
func (m *MockDao) DeleteSDAVGALLCodeByTime(arg0 context.Context, arg1 repository.DeleteSDAVGALLCodeByTimeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSDAVGALLCodeByTime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSDAVGALLCodeByTime indicates an expected call of DeleteSDAVGALLCodeByTime.
func (mr *MockDaoMockRecorder) DeleteSDAVGALLCodeByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSDAVGALLCodeByTime", reflect.TypeOf((*MockDao)(nil).DeleteSDAVGALLCodeByTime), arg0, arg1)
}

// DeleteSDAVGALLCodePrexForTest mocks base method.
func (m *MockDao) DeleteSDAVGALLCodePrexForTest(arg0 context.Context, arg1 repository.DeleteSDAVGALLCodePrexForTestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSDAVGALLCodePrexForTest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSDAVGALLCodePrexForTest indicates an expected call of DeleteSDAVGALLCodePrexForTest.
func (mr *MockDaoMockRecorder) DeleteSDAVGALLCodePrexForTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSDAVGALLCodePrexForTest", reflect.TypeOf((*MockDao)(nil).DeleteSDAVGALLCodePrexForTest), arg0, arg1)
}

// GetSDAVGALLs mocks base method.
func (m *MockDao) GetSDAVGALLs(arg0 context.Context, arg1 repository.GetSDAVGALLsParams) ([]repository.StockDayAvgAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDAVGALLs", arg0, arg1)
	ret0, _ := ret[0].([]repository.StockDayAvgAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSDAVGALLs indicates an expected call of GetSDAVGALLs.
func (mr *MockDaoMockRecorder) GetSDAVGALLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDAVGALLs", reflect.TypeOf((*MockDao)(nil).GetSDAVGALLs), arg0, arg1)
}

// GetSPRs mocks base method.
func (m *MockDao) GetSPRs(arg0 context.Context, arg1 repository.GetSPRsParams) ([]repository.StockPriceRealtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSPRs", arg0, arg1)
	ret0, _ := ret[0].([]repository.StockPriceRealtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSPRs indicates an expected call of GetSPRs.
func (mr *MockDaoMockRecorder) GetSPRs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSPRs", reflect.TypeOf((*MockDao)(nil).GetSPRs), arg0, arg1)
}
