// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: clientRegister.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createClientRegister = `-- name: CreateClientRegister :one
INSERT INTO "client_register"(
    client_uid,
    stock_code,
    created_at,
    updated_at
) VALUES(
    $1, $2, $3, $4
)   RETURNING client_uid, stock_code, created_at, updated_at
`

type CreateClientRegisterParams struct {
	ClientUid uuid.UUID          `json:"client_uid"`
	StockCode string             `json:"stock_code"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateClientRegister(ctx context.Context, arg CreateClientRegisterParams) (ClientRegister, error) {
	row := q.db.QueryRow(ctx, createClientRegister,
		arg.ClientUid,
		arg.StockCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ClientRegister
	err := row.Scan(
		&i.ClientUid,
		&i.StockCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClientRegister = `-- name: DeleteClientRegister :exec
DELETE FROM "client_register"
WHERE client_uid = $1
    AND stock_code = $2
`

type DeleteClientRegisterParams struct {
	ClientUid uuid.UUID `json:"client_uid"`
	StockCode string    `json:"stock_code"`
}

func (q *Queries) DeleteClientRegister(ctx context.Context, arg DeleteClientRegisterParams) error {
	_, err := q.db.Exec(ctx, deleteClientRegister, arg.ClientUid, arg.StockCode)
	return err
}

const getClientRegisterByClientUID = `-- name: GetClientRegisterByClientUID :many
SELECT client_uid, stock_code, created_at, updated_at FROM "client_register"
WHERE client_uid = $1
`

func (q *Queries) GetClientRegisterByClientUID(ctx context.Context, clientUid uuid.UUID) ([]ClientRegister, error) {
	rows, err := q.db.Query(ctx, getClientRegisterByClientUID, clientUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientRegister{}
	for rows.Next() {
		var i ClientRegister
		if err := rows.Scan(
			&i.ClientUid,
			&i.StockCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientRegisters = `-- name: GetClientRegisters :many
SELECT client_uid, stock_code, created_at, updated_at FROM  "client_register"
ORDER BY client_uid
LIMIT $1
OFFSET $2
`

type GetClientRegistersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetClientRegisters(ctx context.Context, arg GetClientRegistersParams) ([]ClientRegister, error) {
	rows, err := q.db.Query(ctx, getClientRegisters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientRegister{}
	for rows.Next() {
		var i ClientRegister
		if err := rows.Scan(
			&i.ClientUid,
			&i.StockCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistinctStockCode = `-- name: GetDistinctStockCode :many
SELECT DISTINCT stock_code FROM "client_register"
`

func (q *Queries) GetDistinctStockCode(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getDistinctStockCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var stock_code string
		if err := rows.Scan(&stock_code); err != nil {
			return nil, err
		}
		items = append(items, stock_code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
