// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: frontendClient.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFrontendClient = `-- name: CreateFrontendClient :one
INSERT INTO "frontend_client"(
    ip,
    region,
    updated_at
) VALUES(
    $1, $2, $3
)   RETURNING client_uid, ip, region, created_at, updated_at
`

type CreateFrontendClientParams struct {
	Ip        string             `json:"ip"`
	Region    string             `json:"region"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateFrontendClient(ctx context.Context, arg CreateFrontendClientParams) (FrontendClient, error) {
	row := q.db.QueryRow(ctx, createFrontendClient, arg.Ip, arg.Region, arg.UpdatedAt)
	var i FrontendClient
	err := row.Scan(
		&i.ClientUid,
		&i.Ip,
		&i.Region,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFrontendClient = `-- name: DeleteFrontendClient :exec
DELETE FROM "frontend_client"
WHERE client_uid = $1
`

func (q *Queries) DeleteFrontendClient(ctx context.Context, clientUid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFrontendClient, clientUid)
	return err
}

const getFrontendClientByID = `-- name: GetFrontendClientByID :many
SELECT client_uid, ip, region, created_at, updated_at FROM "frontend_client"
WHERE client_uid = $1
`

func (q *Queries) GetFrontendClientByID(ctx context.Context, clientUid uuid.UUID) ([]FrontendClient, error) {
	rows, err := q.db.Query(ctx, getFrontendClientByID, clientUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FrontendClient{}
	for rows.Next() {
		var i FrontendClient
		if err := rows.Scan(
			&i.ClientUid,
			&i.Ip,
			&i.Region,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFrontendClients = `-- name: GetFrontendClients :many
SELECT client_uid, ip, region, created_at, updated_at FROM  "frontend_client"
ORDER BY client_uid
LIMIT $1
OFFSET $2
`

type GetFrontendClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetFrontendClients(ctx context.Context, arg GetFrontendClientsParams) ([]FrontendClient, error) {
	rows, err := q.db.Query(ctx, getFrontendClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FrontendClient{}
	for rows.Next() {
		var i FrontendClient
		if err := rows.Scan(
			&i.ClientUid,
			&i.Ip,
			&i.Region,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
