// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RoyceAzure/go-stockinfo-distributor/repository/remote_repo (interfaces: SchdulerInfoDao)

// Package mock_remote_repo is a generated GoMock package.
package mock_remote_repo

import (
	context "context"
	reflect "reflect"

	"github.com/RoyceAzure/go-stockinfo-distributor/repository/remote_repo"
	pb "github.com/RoyceAzure/go-stockinfo-distributor/shared/pb/stock_info_scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockSchdulerInfoDao is a mock of SchdulerInfoDao interface.
type MockSchdulerInfoDao struct {
	ctrl     *gomock.Controller
	recorder *MockSchdulerInfoDaoMockRecorder
}

// MockSchdulerInfoDaoMockRecorder is the mock recorder for MockSchdulerInfoDao.
type MockSchdulerInfoDaoMockRecorder struct {
	mock *MockSchdulerInfoDao
}

// NewMockSchdulerInfoDao creates a new mock instance.
func NewMockSchdulerInfoDao(ctrl *gomock.Controller) *MockSchdulerInfoDao {
	mock := &MockSchdulerInfoDao{ctrl: ctrl}
	mock.recorder = &MockSchdulerInfoDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchdulerInfoDao) EXPECT() *MockSchdulerInfoDaoMockRecorder {
	return m.recorder
}

// GetPreSprTime mocks base method.
func (m *MockSchdulerInfoDao) GetPreSprTime(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSprTime", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSprTime indicates an expected call of GetPreSprTime.
func (mr *MockSchdulerInfoDaoMockRecorder) GetPreSprTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSprTime", reflect.TypeOf((*MockSchdulerInfoDao)(nil).GetPreSprTime), arg0)
}

// GetSprCache mocks base method.
func (m *MockSchdulerInfoDao) GetSprCache(arg0 context.Context) *repository.SprCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSprCache", arg0)
	ret0, _ := ret[0].(*repository.SprCache)
	return ret0
}

// GetSprCache indicates an expected call of GetSprCache.
func (mr *MockSchdulerInfoDaoMockRecorder) GetSprCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSprCache", reflect.TypeOf((*MockSchdulerInfoDao)(nil).GetSprCache), arg0)
}

// GetStockPriceRealTime mocks base method.
func (m *MockSchdulerInfoDao) GetStockPriceRealTime(arg0 context.Context) (*pb.StockPriceRealTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockPriceRealTime", arg0)
	ret0, _ := ret[0].(*pb.StockPriceRealTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockPriceRealTime indicates an expected call of GetStockPriceRealTime.
func (mr *MockSchdulerInfoDaoMockRecorder) GetStockPriceRealTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockPriceRealTime", reflect.TypeOf((*MockSchdulerInfoDao)(nil).GetStockPriceRealTime), arg0)
}

// SetPreSprTime mocks base method.
func (m *MockSchdulerInfoDao) SetPreSprTime(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreSprTime", arg0, arg1)
}

// SetPreSprTime indicates an expected call of SetPreSprTime.
func (mr *MockSchdulerInfoDaoMockRecorder) SetPreSprTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreSprTime", reflect.TypeOf((*MockSchdulerInfoDao)(nil).SetPreSprTime), arg0, arg1)
}

// SetSprCache mocks base method.
func (m *MockSchdulerInfoDao) SetSprCache(arg0 context.Context, arg1 []*pb.StockPriceRealTime, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSprCache", arg0, arg1, arg2)
}

// SetSprCache indicates an expected call of SetSprCache.
func (mr *MockSchdulerInfoDaoMockRecorder) SetSprCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSprCache", reflect.TypeOf((*MockSchdulerInfoDao)(nil).SetSprCache), arg0, arg1, arg2)
}
